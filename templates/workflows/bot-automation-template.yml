name: Bot Automation

on:
  issue_comment:
    types: [created]
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  bot-commands:
    name: Process Bot Commands
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      contains(github.event.comment.body, '/bot')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Parse command
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const match = comment.match(/^\/bot\s+(\w+)(?:\s+(.*))?$/);

            if (match) {
              const [_, command, args] = match;
              core.setOutput('command', command);
              core.setOutput('args', args || '');
              
              // Acknowledge command
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'
              });
              
              return { command, args };
            }

            return null;

      - name: Handle claim command
        if: steps.parse.outputs.command == 'claim'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          node scripts/bot-workflow/bot-claim-issue.js $ISSUE_NUMBER

      - name: Handle checkpoint command
        if: steps.parse.outputs.command == 'checkpoint'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MESSAGE="${{ steps.parse.outputs.args }}"
          node scripts/bot-workflow/bot-checkpoint.js "$MESSAGE"

      - name: Handle status command
        if: steps.parse.outputs.command == 'status'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node scripts/bot-workflow/bot-status-all.js

      - name: Add reaction on success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });

      - name: Add reaction on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'confused'
            });

  auto-label:
    name: Auto Label Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'

    steps:
      - name: Add labels based on content
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const labels = [];

            // Auto-detect issue type
            const title = issue.title.toLowerCase();
            const body = issue.body?.toLowerCase() || '';

            if (title.includes('bug') || body.includes('bug') || body.includes('error')) {
              labels.push('bug');
            } else if (title.includes('feat') || body.includes('feature')) {
              labels.push('enhancement');
            } else if (title.includes('docs') || body.includes('documentation')) {
              labels.push('documentation');
            }

            // Add default labels
            labels.push('status: needs-triage');

            // Check if ready for bot
            if (body.includes('bot:ready') || body.includes('/bot ready')) {
              labels.push('agent:todo');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
            }
