
> ag-grid-react-components@1.2.0 test:coverage
> vitest run --coverage


 RUN  v3.2.4 /Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components
      Coverage enabled with v8

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > applies filter model when filter instance is available
[Workaround] Starting filter workaround for column: testColumn

stdout | src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts > filterModelBuilder > applyQuickFilter > clears filter when option is null
[QuickFilter] Applying filter: { option: [90mundefined[39m, columnId: [32m'dateColumn'[39m, filterModel: [90mundefined[39m }
[QuickFilter] Current grid filter model: { dateColumn: { type: [32m'equals'[39m, value: [32m'test'[39m } }
[QuickFilter] Clearing filter for column: dateColumn
[QuickFilter] Final filter model to apply: {}

stdout | src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts > filterModelBuilder > applyQuickFilter > clears filter when option has null filterModel
[QuickFilter] Applying filter: { option: [32m'All'[39m, columnId: [32m'dateColumn'[39m, filterModel: [1mnull[22m }
[QuickFilter] Current grid filter model: {
  dateColumn: { type: [32m'equals'[39m, value: [32m'test'[39m },
  otherColumn: { type: [32m'contains'[39m, value: [32m'other'[39m }
}
[QuickFilter] Final filter model to apply: { otherColumn: { type: [32m'contains'[39m, value: [32m'other'[39m } }

stdout | src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts > filterModelBuilder > applyQuickFilter > applies filter model from option
[QuickFilter] Applying filter: {
  option: [32m'Today'[39m,
  columnId: [32m'dateColumn'[39m,
  filterModel: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
}
[QuickFilter] Current grid filter model: {}
[QuickFilter] Setting filter model for column dateColumn : { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
[QuickFilter] Final filter model to apply: {
  dateColumn: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
}
[QuickFilter] Applying workaround for column: dateColumn
[Workaround] Starting filter workaround for column: dateColumn

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > applies filter model when filter instance is available
[Workaround] Filter instance type: object Object
[Workaround] Filter instance is a promise, waiting...

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > applies filter model when filter instance is available
[Workaround] Filter instance after await: {
  setModel: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m,
    [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
  },
  getModel: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m,
    [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
  }
}
[Workaround] Has setModel? function
[Workaround] Calling setModel with: { type: [32m'equals'[39m, value: [32m'test'[39m }

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > applies filter model when filter instance is available
[Workaround] setModel completed

stderr | src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts > filterModelBuilder > applyQuickFilter > applies filter model from option
[Workaround] No valid filter instance or setModel method

stdout | src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts > filterModelBuilder > applyQuickFilter > applies filter model from option
[Workaround] Filter instance type: undefined [90mundefined[39m
[Workaround] Filter instance after await: [90mundefined[39m
[Workaround] Has setModel? undefined
[Workaround] Calling onFilterChanged

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > applies filter model when filter instance is available
[Workaround] Calling onFilterChanged

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > applies filter model when filter instance is available
[Workaround] Forcing grid refresh

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles null filter instance gracefully
[Workaround] Starting filter workaround for column: testColumn

stdout | src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts > filterModelBuilder > applyQuickFilter > applies filter model from option
[Workaround] Forcing grid refresh

stdout | src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts > filterModelBuilder > applyQuickFilter > handles API errors gracefully
[QuickFilter] Applying filter: {
  option: [32m'Test'[39m,
  columnId: [32m'dateColumn'[39m,
  filterModel: { type: [32m'equals'[39m, value: [32m'test'[39m }
}
[QuickFilter] Current grid filter model: {
  dateColumn: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
}
[QuickFilter] Setting filter model for column dateColumn : { type: [32m'equals'[39m, value: [32m'test'[39m }
[QuickFilter] Final filter model to apply: { dateColumn: { type: [32m'equals'[39m, value: [32m'test'[39m } }
[QuickFilter] Applying workaround for column: dateColumn
[Workaround] Starting filter workaround for column: dateColumn

stderr | src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts > filterModelBuilder > applyQuickFilter > handles API errors gracefully
[Workaround] No valid filter instance or setModel method

stdout | src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts > filterModelBuilder > applyQuickFilter > handles API errors gracefully
[Workaround] Filter instance type: undefined [90mundefined[39m
[Workaround] Filter instance after await: [90mundefined[39m
[Workaround] Has setModel? undefined
[Workaround] Calling onFilterChanged

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles null filter instance gracefully
[Workaround] Filter instance type: object Object
[Workaround] Filter instance is a promise, waiting...

stderr | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles null filter instance gracefully
[Workaround] No valid filter instance or setModel method

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles null filter instance gracefully
[Workaround] Filter instance after await: [1mnull[22m
[Workaround] Has setModel? undefined
[Workaround] Calling onFilterChanged

 ✓ src/components/DateFilter/components/ErrorBoundary.test.tsx (15 tests) 173ms
stdout | src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts > filterModelBuilder > applyQuickFilter > handles API errors gracefully
[Workaround] Forcing grid refresh

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles null filter instance gracefully
[Workaround] Forcing grid refresh

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles undefined filter instance gracefully
[Workaround] Starting filter workaround for column: testColumn

 ✓ src/components/QuickFilterDropdown/utils/filterModelBuilder.test.ts (11 tests) 316ms
stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles undefined filter instance gracefully
[Workaround] Filter instance type: object Object
[Workaround] Filter instance is a promise, waiting...

stderr | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles undefined filter instance gracefully
[Workaround] No valid filter instance or setModel method

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles undefined filter instance gracefully
[Workaround] Filter instance after await: [90mundefined[39m
[Workaround] Has setModel? undefined
[Workaround] Calling onFilterChanged

stdout | src/demo/components/AvatarCellRenderer.test.tsx > AvatarCellRenderer > shows photo for users in ASSIGNEES_WITH_PHOTOS
Avatar for Alex Chen: {
  url: [32m'https://i.pravatar.cc/64?u=alexchen'[39m,
  seed: [32m'alexchen'[39m,
  imageError: [33mfalse[39m,
  imageLoaded: [33mfalse[39m
}

stdout | src/demo/components/AvatarCellRenderer.test.tsx > AvatarCellRenderer > handles image load error gracefully
Avatar for Sarah Johnson: {
  url: [32m'https://i.pravatar.cc/64?u=sarahjohnson'[39m,
  seed: [32m'sarahjohnson'[39m,
  imageError: [33mfalse[39m,
  imageLoaded: [33mfalse[39m
}

stdout | src/demo/components/AvatarCellRenderer.test.tsx > AvatarCellRenderer > handles image load error gracefully
Avatar for Sarah Johnson: {
  url: [32m'https://i.pravatar.cc/64?u=sarahjohnson'[39m,
  seed: [32m'sarahjohnson'[39m,
  imageError: [33mtrue[39m,
  imageLoaded: [33mfalse[39m
}

stdout | src/demo/components/AvatarCellRenderer.test.tsx > AvatarCellRenderer > shows loading state while image loads
Avatar for Emma Davis: {
  url: [32m'https://i.pravatar.cc/64?u=emmadavis'[39m,
  seed: [32m'emmadavis'[39m,
  imageError: [33mfalse[39m,
  imageLoaded: [33mfalse[39m
}

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles undefined filter instance gracefully
[Workaround] Forcing grid refresh

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles filter without setModel method
[Workaround] Starting filter workaround for column: testColumn

 ❯ src/components/ActiveFilters/ActiveFilters.test.tsx (22 tests | 2 failed) 136ms
   ✓ ActiveFilters > Component Rendering > should render without crashing 20ms
   ✓ ActiveFilters > Component Rendering > should render with custom className 20ms
   ✓ ActiveFilters > Component Rendering > should render nothing when filterModel is empty 1ms
   ✓ ActiveFilters > Component Rendering > should have proper test id 2ms
   × ActiveFilters > Date Filter Display > should display absolute date filter with equals 29ms
     → Unable to find an element with the text: (content, element) => { return element?.className === "_filterValue_70fc69" && content.includes("/2024"); } (normalized from '(content, element) => {
        return element?.className === "_filterValue_70fc69" && content.includes("/2024");
      }'). This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mclass[39m=[32m"_container_476eb5 "[39m
      [33mdata-testid[39m=[32m"active-filters"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"_filterPills_476eb5"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"_filterPill_476eb5"[39m
        [36m>[39m
          [36m<span[39m
            [33mclass[39m=[32m"_pillLabel_476eb5"[39m
          [36m>[39m
            [36m<span[39m
              [33mclass[39m=[32m"_columnName_476eb5"[39m
            [36m>[39m
              [0mDueDate[0m
              [0m:[0m
            [36m</span>[39m
            [36m<span[39m
              [33mclass[39m=[32m"_filterValue_476eb5"[39m
            [36m>[39m
              [0m12/24/2024[0m
            [36m</span>[39m
          [36m</span>[39m
          [36m<button[39m
            [33maria-label[39m=[32m"Remove DueDate filter"[39m
            [33mclass[39m=[32m"_removeButton_476eb5"[39m
          [36m>[39m
            [0m×[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
      [36m<button[39m
        [33maria-label[39m=[32m"Clear all filters"[39m
        [33mclass[39m=[32m"_clearAllButton_476eb5"[39m
      [36m>[39m
        [0mClear all[0m
      [36m</button>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
   ✓ ActiveFilters > Date Filter Display > should display relative date filter 2ms
   × ActiveFilters > Date Filter Display > should display date range filter 5ms
     → Unable to find an element with the text: (content, element) => { return element?.className === "_filterValue_70fc69" && content.includes(" to ") && content.includes("/202"); } (normalized from '(content, element) => {
        return element?.className === "_filterValue_70fc69" && content.includes(" to ") && content.includes("/202");
      }'). This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mclass[39m=[32m"_container_476eb5 "[39m
      [33mdata-testid[39m=[32m"active-filters"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"_filterPills_476eb5"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"_filterPill_476eb5"[39m
        [36m>[39m
          [36m<span[39m
            [33mclass[39m=[32m"_pillLabel_476eb5"[39m
          [36m>[39m
            [36m<span[39m
              [33mclass[39m=[32m"_columnName_476eb5"[39m
            [36m>[39m
              [0mCreated[0m
              [0m:[0m
            [36m</span>[39m
            [36m<span[39m
              [33mclass[39m=[32m"_filterValue_476eb5"[39m
            [36m>[39m
              [0m12/31/2023 to 12/30/2024[0m
            [36m</span>[39m
          [36m</span>[39m
          [36m<button[39m
            [33maria-label[39m=[32m"Remove Created filter"[39m
            [33mclass[39m=[32m"_removeButton_476eb5"[39m
          [36m>[39m
            [0m×[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
      [36m<button[39m
        [33maria-label[39m=[32m"Clear all filters"[39m
        [33mclass[39m=[32m"_clearAllButton_476eb5"[39m
      [36m>[39m
        [0mClear all[0m
      [36m</button>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
   ✓ ActiveFilters > Date Filter Display > should display relative date range filter 1ms
   ✓ ActiveFilters > Text Filter Display > should display text filter 3ms
   ✓ ActiveFilters > Text Filter Display > should display number filter 2ms
   ✓ ActiveFilters > Set Filter Display > should display set filter with multiple values 1ms
   ✓ ActiveFilters > Set Filter Display > should display set filter with single value 1ms
   ✓ ActiveFilters > Filter Removal > should remove individual filter when × is clicked 15ms
   ✓ ActiveFilters > Filter Removal > should clear all filters when Clear all is clicked 7ms
   ✓ ActiveFilters > Filter Removal > should handle keyboard navigation for remove buttons 6ms
   ✓ ActiveFilters > Complex Filter Models > should display multiple filters of different types 4ms
   ✓ ActiveFilters > Complex Filter Models > should handle filter models with null/undefined values 4ms
   ✓ ActiveFilters > Edge Cases > should handle missing column definitions gracefully 1ms
   ✓ ActiveFilters > Edge Cases > should handle complex nested filter models 1ms
   ✓ ActiveFilters > Edge Cases > should handle empty string filters 1ms
   ✓ ActiveFilters > Accessibility > should have proper ARIA labels for interactive elements 3ms
   ✓ ActiveFilters > Accessibility > should handle filter removal with proper accessibility 3ms
 ✓ src/demo/components/DocumentationPanel.test.tsx (13 tests) 150ms
stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles filter without setModel method
[Workaround] Filter instance type: object Object
[Workaround] Filter instance is a promise, waiting...

stderr | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles filter without setModel method
[Workaround] No valid filter instance or setModel method

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles filter without setModel method
[Workaround] Filter instance after await: {
  getModel: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m,
    [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
  }
}
[Workaround] Has setModel? undefined
[Workaround] Calling onFilterChanged

 ✓ src/demo/components/AvatarCellRenderer.test.tsx (12 tests) 192ms
stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles filter without setModel method
[Workaround] Forcing grid refresh

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles synchronous filter instance
[Workaround] Starting filter workaround for column: testColumn

 ✓ src/demo/components/AnchorHeading.test.tsx (12 tests) 340ms
stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles synchronous filter instance
[Workaround] Filter instance type: object Promise
[Workaround] Filter instance is a promise, waiting...

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles synchronous filter instance
[Workaround] Filter instance after await: {
  setModel: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m,
    [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
  },
  getModel: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m,
    [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
  }
}
[Workaround] Has setModel? function
[Workaround] Calling setModel with: { type: [32m'equals'[39m, value: [32m'test'[39m }

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles synchronous filter instance
[Workaround] setModel completed

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > selects an option and applies filter
[QuickFilter] Applying filter: {
  option: [32m'Today'[39m,
  columnId: [32m'date'[39m,
  filterModel: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
}
[QuickFilter] Current grid filter model: {}
[QuickFilter] Setting filter model for column date : { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
[QuickFilter] Final filter model to apply: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Applying workaround for column: date
[Workaround] Starting filter workaround for column: date

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles synchronous filter instance
[Workaround] Calling onFilterChanged

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles synchronous filter instance
[Workaround] Forcing grid refresh

stdout | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles errors gracefully
[Workaround] Starting filter workaround for column: testColumn

stderr | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > selects an option and applies filter
[Workaround] No valid filter instance or setModel method

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > selects an option and applies filter
[Workaround] Filter instance type: undefined [90mundefined[39m
[Workaround] Filter instance after await: [90mundefined[39m
[Workaround] Has setModel? undefined
[Workaround] Calling onFilterChanged

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > selects an option and applies filter
[Workaround] Forcing grid refresh

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > clears filter when selecting 'All Items'
[QuickFilter] Applying filter: { option: [32m'All Items'[39m, columnId: [32m'date'[39m, filterModel: [1mnull[22m }
[QuickFilter] Current grid filter model: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Final filter model to apply: {}

stderr | src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts > agGridWorkaround > applyFilterModelWithWorkaround > handles errors gracefully
[applyFilterModelWithWorkaround] Error: Error: Test error
    at Object.<anonymous> [90m(/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/[39msrc/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts:128:15[90m)[39m
    at Object.mockCall [90m(file:///Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as getColumnFilterInstance] [90m(file:///Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at applyFilterModelWithWorkaround [90m(/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/[39msrc/components/QuickFilterDropdown/utils/agGridWorkaround.ts:34:7[90m)[39m
    at [90m/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/[39msrc/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts:131:7
    at [90mfile:///Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > supports keyboard navigation
[QuickFilter] Applying filter: {
  option: [32m'Today'[39m,
  columnId: [32m'date'[39m,
  filterModel: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
}
[QuickFilter] Current grid filter model: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Setting filter model for column date : { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
[QuickFilter] Final filter model to apply: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Applying workaround for column: date
[Workaround] Starting filter workaround for column: date

 ✓ src/components/QuickFilterDropdown/utils/agGridWorkaround.test.ts (11 tests) 1054ms
stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > Portal Rendering > renders dropdown inline when usePortal is 'never'
[Workaround] Filter instance type: undefined [90mundefined[39m
[Workaround] Filter instance after await: [90mundefined[39m
[Workaround] Has setModel? undefined
[Workaround] Calling onFilterChanged

stderr | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > Portal Rendering > renders dropdown inline when usePortal is 'never'
[Workaround] No valid filter instance or setModel method

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > Portal Rendering > updates portal position on window resize
[Workaround] Forcing grid refresh

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > Error Handling > handles filter application errors gracefully
[QuickFilter] Filter model after applying: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Displayed row count: [33m0[39m

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > Error Handling > handles filter application errors gracefully
[QuickFilter] Filter model after applying: {}
[QuickFilter] Displayed row count: [33m0[39m

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > Error Handling > handles filter application errors gracefully
[QuickFilter] Applying filter: {
  option: [32m'Today'[39m,
  columnId: [32m'date'[39m,
  filterModel: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
}
[QuickFilter] Current grid filter model: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Setting filter model for column date : { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
[QuickFilter] Final filter model to apply: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Applying workaround for column: date
[Workaround] Starting filter workaround for column: date

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > Edge Cases > scrolls highlighted option into view
[Workaround] Filter instance type: undefined [90mundefined[39m
[Workaround] Filter instance after await: [90mundefined[39m
[Workaround] Has setModel? undefined
[Workaround] Calling onFilterChanged

stderr | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > Edge Cases > scrolls highlighted option into view
[Workaround] No valid filter instance or setModel method

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx
[Workaround] Forcing grid refresh

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > initialization > should initialize with default values when no model provided
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > initialization > should initialize with default mode preference
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > initialization > should initialize from absolute date model
[useFilterState] Initializing with model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > initialization > should initialize from relative date model
[useFilterState] Initializing with model: {
  type: [32m'before'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'Today+7d'[39m,
  expressionTo: [32m'Today+14d'[39m
}

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > initialization > should handle partial models gracefully
[useFilterState] Initializing with model: { type: [32m'after'[39m, mode: [32m'absolute'[39m }

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > filter type management > should update filter type
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > filter type management > should preserve existing dates when changing filter type
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > filter mode management > should toggle between absolute and relative modes
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | Timeout._onTimeout (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/src/components/QuickFilterDropdown/utils/filterModelBuilder.ts:112:13)
[QuickFilter] Filter model after applying: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }

stdout | Timeout._onTimeout (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/src/components/QuickFilterDropdown/utils/filterModelBuilder.ts:115:13)
[QuickFilter] Displayed row count: [33m0[39m

 ✓ src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx (31 tests) 1146ms
stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > filter mode management > should preserve data when switching modes
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > absolute date management > should set absolute dateFrom
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > absolute date management > should set absolute dateTo
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > absolute date management > should handle null dates
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > relative expression management > should set expression from
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > relative expression management > should set expression to
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > relative expression management > should handle empty expressions
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > validation state management > should set from expression validity
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > validation state management > should set to expression validity
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > validation state management > should set to expression error
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > reset functionality > should reset all state to defaults
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > reset functionality > should reset to specified default mode
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > model initialization > should handle initializeFromModel
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] initializeFromModel called with: { type: [32m'after'[39m, mode: [32m'relative'[39m, expressionFrom: [32m'Today-30d'[39m }
[useFilterState] Setting filter type to: after
[useFilterState] Setting filter mode to: relative
[useFilterState] Setting relative expressions: { from: [32m'Today-30d'[39m, to: [90mundefined[39m }
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > model initialization > should handle complex range model initialization
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-12-31T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [35m2023-12-31T00:00:00.000Z[39m }
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > model initialization > should preserve validation state during model changes
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [90mundefined[39m }
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > edge cases and error handling > should handle invalid filter types gracefully
[useFilterState] Initializing with model: { type: [32m'invalidType'[39m, mode: [32m'absolute'[39m }

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > edge cases and error handling > should handle invalid filter modes gracefully
[useFilterState] Initializing with model: { type: [32m'equals'[39m, mode: [32m'invalidMode'[39m }

 ✓ src/components/DateFilter/components/FilterModeToggle/FilterModeToggle.test.tsx (21 tests | 4 skipped) 123ms
stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > edge cases and error handling > should handle models with mixed mode/data gracefully
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  expressionFrom: [32m'Today'[39m
}

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > state stability and memoization > should provide stable function references
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

 ✓ src/components/DateFilter/components/FilterActions/FilterActions.test.tsx (26 tests | 3 skipped) 113ms
 ✓ src/demo/components/CategoryCellRenderer.test.tsx (4 tests) 181ms
 ✓ src/components/DateFilter/hooks/useFilterState.test.ts (27 tests) 60ms
 ✓ src/demo/components/PercentBarRenderer.test.tsx (21 tests) 258ms
Sourcemap for "/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/node_modules/react-datepicker/dist/index.es.js" points to missing source files
 ✓ src/utils/gridStateUtils.test.ts (23 tests) 27ms
stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Full Component Integration > should render all components in absolute mode
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Full Component Integration > should switch between absolute and relative modes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Full Component Integration > should apply filter when Apply button is clicked
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z","dateTo":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [1mnull[22m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [1mnull[22m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Full Component Integration > should apply filter when Apply button is clicked
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Full Component Integration > should reset filter when Clear button is clicked
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z","dateTo":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [1mnull[22m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [1mnull[22m }
Reset filter
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z","dateTo":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [1mnull[22m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [1mnull[22m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z","dateTo":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [1mnull[22m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [1mnull[22m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z","dateTo":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [1mnull[22m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > State Management Integration > should maintain state consistency across mode changes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > State Management Integration > should maintain state consistency across mode changes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > State Management Integration > should validate filter types correctly
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"inRange","mode":"absolute","dateFrom":"2023-01-01T00:00:00.000Z","dateTo":"2023-01-31T00:00:00.000Z"}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'inRange'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
      dateTo: [35m2023-01-31T00:00:00.000Z[39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-31T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-31T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-31T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [35m2023-01-31T00:00:00.000Z[39m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Validation Integration > should disable Apply button when filter is invalid
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Validation Integration > should enable Apply button when filter becomes valid
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2025-06-28T05:00:00.000Z[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

 ✓ src/demo/components/SimpleCodeBlock.test.tsx (16 tests) 2188ms
   ✓ SimpleCodeBlock > copies code to clipboard when copy button is clicked  2010ms
stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Performance Integration > should debounce validation correctly
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "T" to: [1mnull[22m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "To" to: [1mnull[22m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "Tod" to: [1mnull[22m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "Toda" to: [1mnull[22m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2025-06-28T05:00:00.000Z[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Error Handling Integration > should handle invalid initial model gracefully
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"invalidType","mode":"invalidMode","dateFrom":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
  }
}
[useFilterState] Initializing with model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[useFilterState] Setting filter type to: invalidType
[useFilterState] Setting filter mode to: invalidMode
[useFilterState] Setting relative expressions: { from: [90mundefined[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"invalidType","mode":"invalidMode","dateFrom":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
  }
}
[useFilterState] Initializing with model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[useFilterState] Setting filter type to: invalidType
[useFilterState] Setting filter mode to: invalidMode
[useFilterState] Setting relative expressions: { from: [90mundefined[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"invalidType","mode":"invalidMode","dateFrom":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
  }
}
[useFilterState] Initializing with model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Error Handling Integration > should handle component rendering with errors gracefully
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Accessibility Integration > should have proper ARIA attributes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Accessibility Integration > should support keyboard navigation
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > should register doesFilterPass callback with AG Grid
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > should provide filter model through getModel callback
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > should provide filter model through getModel callback
[DateFilter] getModel called, returning: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should return true when no filter is active
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] doesFilterPass called #1 currentModel: [1mnull[22m isValid: [33mfalse[39m effectiveDateFrom: [1mnull[22m effectiveDateTo: [1mnull[22m
[DateFilter] Returning true - no valid filter

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with equals operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with equals operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with equals operator
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2023-01-14T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2023-01-15T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with equals operator
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with notEqual operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] setModel called with: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: notEqual
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with notEqual operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with notEqual operator
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: notEqual {
  cellDate: [35m2023-01-15T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: notEqual {
  cellDate: [35m2023-01-14T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with notEqual operator
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with after operator (inclusive)
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    afterInclusive: [33mtrue[39m
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m
}
[DateFilter] setModel called with: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: after
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with after operator (inclusive)
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    afterInclusive: [33mtrue[39m
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with after operator (inclusive)
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: after {
  cellDate: [35m2023-01-15T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: after {
  cellDate: [35m2023-01-14T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #3 currentModel: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: after {
  cellDate: [35m2023-01-13T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with after operator (inclusive)
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with before operator (exclusive)
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    beforeInclusive: [33mfalse[39m
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  toInclusive: [33mfalse[39m
}
[DateFilter] setModel called with: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  toInclusive: [33mfalse[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  toInclusive: [33mfalse[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: before
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with before operator (exclusive)
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with before operator (exclusive)
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    beforeInclusive: [33mfalse[39m
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with before operator (exclusive)
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: before {
  cellDate: [35m2023-01-13T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: before {
  cellDate: [35m2023-01-14T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #3 currentModel: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: before {
  cellDate: [35m2023-01-15T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with before operator (exclusive)
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with inRange operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-10T00:00:00.000Z'[39m,
  dateTo: [32m'2023-01-20T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
}
[DateFilter] setModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-10T00:00:00.000Z'[39m,
  dateTo: [32m'2023-01-20T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-10T00:00:00.000Z[39m, to: [35m2023-01-20T00:00:00.000Z[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-10T00:00:00.000Z'[39m,
  dateTo: [32m'2023-01-20T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with inRange operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with inRange operator
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-10T00:00:00.000Z[39m effectiveDateTo: [35m2023-01-20T00:00:00.000Z[39m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-14T06:00:00.000Z[39m,
  fromDate: [35m2023-01-09T06:00:00.000Z[39m,
  toDate: [35m2023-01-19T06:00:00.000Z[39m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-10T00:00:00.000Z[39m effectiveDateTo: [35m2023-01-20T00:00:00.000Z[39m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-09T06:00:00.000Z[39m,
  fromDate: [35m2023-01-09T06:00:00.000Z[39m,
  toDate: [35m2023-01-19T06:00:00.000Z[39m
}
[DateFilter] doesFilterPass called #3 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-10T00:00:00.000Z[39m effectiveDateTo: [35m2023-01-20T00:00:00.000Z[39m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-19T06:00:00.000Z[39m,
  fromDate: [35m2023-01-09T06:00:00.000Z[39m,
  toDate: [35m2023-01-19T06:00:00.000Z[39m
}
[DateFilter] doesFilterPass called #4 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-10T00:00:00.000Z[39m effectiveDateTo: [35m2023-01-20T00:00:00.000Z[39m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-08T06:00:00.000Z[39m,
  fromDate: [35m2023-01-09T06:00:00.000Z[39m,
  toDate: [35m2023-01-19T06:00:00.000Z[39m
}
[DateFilter] doesFilterPass called #5 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-10T00:00:00.000Z[39m effectiveDateTo: [35m2023-01-20T00:00:00.000Z[39m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-20T06:00:00.000Z[39m,
  fromDate: [35m2023-01-09T06:00:00.000Z[39m,
  toDate: [35m2023-01-19T06:00:00.000Z[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with inRange operator
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle null and invalid dates
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle null and invalid dates
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle null and invalid dates
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] doesFilterPass called #3 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] doesFilterPass called #4 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35mInvalid Date[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle null and invalid dates
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle relative date expressions
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: { type: [32m'equals'[39m, mode: [32m'relative'[39m, expressionFrom: [32m'Today'[39m }
[DateFilter] setModel called with: { type: [32m'equals'[39m, mode: [32m'relative'[39m, expressionFrom: [32m'Today'[39m }
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'Today'[39m,
  dateFrom: [90mundefined[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: relative
[useFilterState] Setting relative expressions: { from: [32m'Today'[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: { type: [32m'equals'[39m, mode: [32m'relative'[39m, expressionFrom: [32m'Today'[39m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle relative date expressions
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2025-06-28T05:00:00.000Z[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle relative date expressions
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'Today'[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2025-06-28T05:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2025-06-28T05:00:00.000Z[39m,
  fromDate: [35m2025-06-28T05:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'Today'[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2025-06-28T05:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2025-06-29T05:00:00.000Z[39m,
  fromDate: [35m2025-06-28T05:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle relative date expressions
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle open-ended ranges
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  dateTo: [1mnull[22m
}
[DateFilter] setModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [1mnull[22m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  dateTo: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle open-ended ranges
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle open-ended ranges
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle open-ended ranges
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-19T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-09T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle open-ended ranges
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle time normalization correctly
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle time normalization correctly
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle time normalization correctly
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2023-01-15T06:00:00.000Z[39m,
  fromDate: [35m2023-01-14T06:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stderr | src/utils/filterStateUtils.test.ts > filterStateUtils > setupFilterStatePersistence > should handle invalid filter data in URL gracefully
Error: Not implemented: navigation (except hash changes)
    at module.exports (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/node_modules/jsdom/lib/jsdom/browser/not-implemented.js:9:17)
    at navigateFetch (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/node_modules/jsdom/lib/jsdom/living/window/navigation.js:77:3)
    at exports.navigate (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/node_modules/jsdom/lib/jsdom/living/window/navigation.js:55:3)
    at LocationImpl._locationObjectNavigate (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/node_modules/jsdom/lib/jsdom/living/window/Location-impl.js:30:5)
    at LocationImpl._locationObjectSetterNavigate (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/node_modules/jsdom/lib/jsdom/living/window/Location-impl.js:24:17)
    at LocationImpl.set search [as search] (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/node_modules/jsdom/lib/jsdom/living/window/Location-impl.js:171:10)
    at Location.set search [as search] (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/node_modules/jsdom/lib/jsdom/living/generated/Location.js:298:39)
    at /Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/src/utils/filterStateUtils.test.ts:378:23
    at file:///Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11
    at file:///Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26 [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle time normalization correctly
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx
[DateFilter] Calling filterChangedCallback after state update

 ❯ src/components/DateFilter/DateFilter.integration.test.tsx (25 tests | 1 failed) 406ms
   ✓ DateFilter Integration Tests > Full Component Integration > should render all components in absolute mode 30ms
   ✓ DateFilter Integration Tests > Full Component Integration > should switch between absolute and relative modes 32ms
   ✓ DateFilter Integration Tests > Full Component Integration > should apply filter when Apply button is clicked 9ms
   ✓ DateFilter Integration Tests > Full Component Integration > should reset filter when Clear button is clicked 13ms
   ✓ DateFilter Integration Tests > State Management Integration > should maintain state consistency across mode changes 24ms
   ✓ DateFilter Integration Tests > State Management Integration > should validate filter types correctly 5ms
   ✓ DateFilter Integration Tests > Validation Integration > should disable Apply button when filter is invalid 4ms
   ✓ DateFilter Integration Tests > Validation Integration > should enable Apply button when filter becomes valid 96ms
   ✓ DateFilter Integration Tests > Performance Integration > should debounce validation correctly 56ms
   ✓ DateFilter Integration Tests > Error Handling Integration > should handle invalid initial model gracefully 8ms
   ✓ DateFilter Integration Tests > Error Handling Integration > should handle component rendering with errors gracefully 10ms
   ✓ DateFilter Integration Tests > Accessibility Integration > should have proper ARIA attributes 6ms
   ✓ DateFilter Integration Tests > Accessibility Integration > should support keyboard navigation 7ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > should register doesFilterPass callback with AG Grid 5ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > should provide filter model through getModel callback 4ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should return true when no filter is active 2ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with equals operator 17ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with notEqual operator 6ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with after operator (inclusive) 8ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with before operator (exclusive) 6ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with inRange operator 7ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle null and invalid dates 6ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle relative date expressions 5ms
   ✓ DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle open-ended ranges 8ms
   × DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle time normalization correctly 32ms
     → expected false to be true // Object.is equality
 ✓ src/utils/filterStateUtils.test.ts (21 tests) 30ms
stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > renders all expected controls (mode toggle, date input, action buttons)
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: [90mundefined[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > renders with a relative date model
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"relative","expressionFrom":"last 7 days"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'relative'[39m,
      expressionFrom: [32m'last 7 days'[39m,
      dateFrom: [90mundefined[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'last 7 days'[39m,
  dateFrom: [90mundefined[39m,
  dateTo: [90mundefined[39m
}
[useFilterValidation] Resolved expressionFrom "last 7 days" to: [1mnull[22m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'last 7 days'[39m,
  dateFrom: [90mundefined[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'last 7 days'[39m,
  dateFrom: [90mundefined[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: relative
[useFilterState] Setting relative expressions: { from: [32m'last 7 days'[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"relative","expressionFrom":"last 7 days"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'relative'[39m,
      expressionFrom: [32m'last 7 days'[39m,
      dateFrom: [90mundefined[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'last 7 days'[39m,
  dateFrom: [90mundefined[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > renders with an empty/null model
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: [90mundefined[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > handles invalid/unsupported model gracefully
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"unknown","mode":"absolute"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[useFilterState] Setting filter type to: unknown
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [90mundefined[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"unknown","mode":"absolute"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[useFilterState] Setting filter type to: unknown
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [90mundefined[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"unknown","mode":"absolute"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > updates UI when model prop changes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-01T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2024-01-01T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2024-01-01T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2024-01-01T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2024-01-01T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2024-01-01T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > main filter container has ARIA role and attributes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: [90mundefined[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > renders without crashing
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: [90mundefined[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > should initialize with default values
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > should trigger filterChangedCallback when filter changes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > should properly filter data using doesFilterPass
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"inRange","mode":"absolute","dateFrom":"2023-01-01T00:00:00.000Z","dateTo":"2023-01-10T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'inRange'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
      dateTo: [35m2023-01-10T00:00:00.000Z[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [35m2023-01-10T00:00:00.000Z[39m }

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > validates relative date expressions
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"inRange","mode":"absolute","dateFrom":"2023-01-01T00:00:00.000Z","dateTo":"2023-01-10T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'inRange'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
      dateTo: [35m2023-01-10T00:00:00.000Z[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [35m2023-01-10T00:00:00.000Z[39m }

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > registers the filter with ag-grid
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: [90mundefined[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > should handle keyboard events
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > should return correct string representation using getModelAsString
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    },
    context: {},
    getModelAsString: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [[32mSymbol(Symbol.dispose)[39m]: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }

 ✓ src/components/RelativeDateFilter.test.tsx (14 tests) 164ms
 ✓ src/demo/components/CodeBlock.test.tsx (15 tests) 2238ms
   ✓ CodeBlock > copies code to clipboard when copy button is clicked  2018ms
stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > relative expression validation > should validate equals filter with valid expression
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T06:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > relative expression validation > should invalidate equals filter with invalid expression
[useFilterValidation] Resolved expressionFrom "InvalidExpression" to: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > relative expression validation > should validate inRange filter with valid expressions
[useFilterValidation] Resolved expressionFrom "Today-7d" to: [35m2022-12-24T06:00:00.000Z[39m
[useFilterValidation] Resolved expressionTo "Today+7d" to: [35m2023-01-07T06:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > relative expression validation > should validate inRange filter with partial expressions
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T06:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > relative expression validation > should resolve various date expressions correctly
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T06:00:00.000Z[39m
[useFilterValidation] Resolved expressionFrom "Today+7d" to: [35m2023-01-07T06:00:00.000Z[39m
[useFilterValidation] Resolved expressionFrom "Today-30d" to: [35m2022-12-01T06:00:00.000Z[39m
[useFilterValidation] Resolved expressionFrom "Today+2w" to: [35m2023-01-14T06:00:00.000Z[39m
[useFilterValidation] Resolved expressionFrom "Today-1m" to: [35m2022-11-30T06:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > expression validation utility > should return validateToExpression function
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T06:00:00.000Z[39m
[useFilterValidation] Resolved expressionTo "Today+7d" to: [35m2023-01-07T06:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > expression validation utility > should validate expressions through validateToExpression
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T06:00:00.000Z[39m
[useFilterValidation] Resolved expressionTo "Today+7d" to: [35m2023-01-07T06:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > edge cases and complex scenarios > should handle mixed valid/invalid expression states
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T06:00:00.000Z[39m
[useFilterValidation] Resolved expressionTo "InvalidExpression" to: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > edge cases and complex scenarios > should update validation when inputs change
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T06:00:00.000Z[39m
[useFilterValidation] Resolved expressionFrom "Today+7d" to: [35m2023-01-07T06:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > performance and memoization > should provide stable function references
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T06:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > timezone and date normalization > should resolve expressions to consistent date format
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T06:00:00.000Z[39m

 ✓ src/components/DateFilter/hooks/useFilterValidation.test.ts (20 tests) 46ms
 ✓ src/utils/dateExpressionParser.test.ts (14 tests) 6ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/ActiveFilters/ActiveFilters.test.tsx > ActiveFilters > Date Filter Display > should display absolute date filter with equals
TestingLibraryElementError: Unable to find an element with the text: (content, element) => { return element?.className === "_filterValue_70fc69" && content.includes("/2024"); } (normalized from '(content, element) => {
        return element?.className === "_filterValue_70fc69" && content.includes("/2024");
      }'). This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mclass[39m=[32m"_container_476eb5 "[39m
      [33mdata-testid[39m=[32m"active-filters"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"_filterPills_476eb5"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"_filterPill_476eb5"[39m
        [36m>[39m
          [36m<span[39m
            [33mclass[39m=[32m"_pillLabel_476eb5"[39m
          [36m>[39m
            [36m<span[39m
              [33mclass[39m=[32m"_columnName_476eb5"[39m
            [36m>[39m
              [0mDueDate[0m
              [0m:[0m
            [36m</span>[39m
            [36m<span[39m
              [33mclass[39m=[32m"_filterValue_476eb5"[39m
            [36m>[39m
              [0m12/24/2024[0m
            [36m</span>[39m
          [36m</span>[39m
          [36m<button[39m
            [33maria-label[39m=[32m"Remove DueDate filter"[39m
            [33mclass[39m=[32m"_removeButton_476eb5"[39m
          [36m>[39m
            [0m×[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
      [36m<button[39m
        [33maria-label[39m=[32m"Clear all filters"[39m
        [33mclass[39m=[32m"_clearAllButton_476eb5"[39m
      [36m>[39m
        [0mClear all[0m
      [36m</button>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/components/ActiveFilters/ActiveFilters.test.tsx:90:34
     88|       expect(screen.getByText("DueDate:")).toBeInTheDocument();
     89|       // Check for the date value - handling potential timezone differ…
     90|       const dateElement = screen.getByText((content, element) => {
       |                                  ^
     91|         return (
     92|           element?.className === "_filterValue_70fc69" &&

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 FAIL  src/components/ActiveFilters/ActiveFilters.test.tsx > ActiveFilters > Date Filter Display > should display date range filter
TestingLibraryElementError: Unable to find an element with the text: (content, element) => { return element?.className === "_filterValue_70fc69" && content.includes(" to ") && content.includes("/202"); } (normalized from '(content, element) => {
        return element?.className === "_filterValue_70fc69" && content.includes(" to ") && content.includes("/202");
      }'). This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m<body>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mclass[39m=[32m"_container_476eb5 "[39m
      [33mdata-testid[39m=[32m"active-filters"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"_filterPills_476eb5"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"_filterPill_476eb5"[39m
        [36m>[39m
          [36m<span[39m
            [33mclass[39m=[32m"_pillLabel_476eb5"[39m
          [36m>[39m
            [36m<span[39m
              [33mclass[39m=[32m"_columnName_476eb5"[39m
            [36m>[39m
              [0mCreated[0m
              [0m:[0m
            [36m</span>[39m
            [36m<span[39m
              [33mclass[39m=[32m"_filterValue_476eb5"[39m
            [36m>[39m
              [0m12/31/2023 to 12/30/2024[0m
            [36m</span>[39m
          [36m</span>[39m
          [36m<button[39m
            [33maria-label[39m=[32m"Remove Created filter"[39m
            [33mclass[39m=[32m"_removeButton_476eb5"[39m
          [36m>[39m
            [0m×[0m
          [36m</button>[39m
        [36m</div>[39m
      [36m</div>[39m
      [36m<button[39m
        [33maria-label[39m=[32m"Clear all filters"[39m
        [33mclass[39m=[32m"_clearAllButton_476eb5"[39m
      [36m>[39m
        [0mClear all[0m
      [36m</button>[39m
    [36m</div>[39m
  [36m</div>[39m
[36m</body>[39m
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/components/ActiveFilters/ActiveFilters.test.tsx:130:39
    128|       expect(screen.getByText("Created:")).toBeInTheDocument();
    129|       // Check for date range - handling potential timezone differences
    130|       const dateRangeElement = screen.getByText((content, element) => {
       |                                       ^
    131|         return (
    132|           element?.className === "_filterValue_70fc69" &&

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/3]⎯

 FAIL  src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle time normalization correctly
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/components/DateFilter/DateFilter.integration.test.tsx:618:63
    616|         // Date with different times should still match
    617|         const morningNode = { data: { date: new Date("2023-01-15T08:30…
    618|         expect(doesFilterPassCallback({ node: morningNode })).toBe(tru…
       |                                                               ^
    619| 
    620|         const eveningNode = { data: { date: new Date("2023-01-15T23:59…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/3]⎯


 Test Files  2 failed | 19 passed (21)
      Tests  3 failed | 364 passed | 7 skipped (374)
   Start at  07:48:24
   Duration  5.45s (transform 2.09s, setup 4.80s, collect 10.49s, tests 9.35s, environment 12.80s, prepare 3.15s)

