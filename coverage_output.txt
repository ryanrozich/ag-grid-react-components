
> ag-grid-react-components@1.2.0 test:coverage
> vitest run --coverage


 RUN  v3.1.4 /Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components
      Coverage enabled with v8

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > initialization > should initialize with default values when no model provided
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > initialization > should initialize with default mode preference
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > initialization > should initialize from absolute date model
[useFilterState] Initializing with model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > initialization > should initialize from relative date model
[useFilterState] Initializing with model: {
  type: [32m'before'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'Today+7d'[39m,
  expressionTo: [32m'Today+14d'[39m
}

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > initialization > should handle partial models gracefully
[useFilterState] Initializing with model: { type: [32m'after'[39m, mode: [32m'absolute'[39m }

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > filter type management > should update filter type
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > filter type management > should preserve existing dates when changing filter type
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > filter mode management > should toggle between absolute and relative modes
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > filter mode management > should preserve data when switching modes
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > absolute date management > should set absolute dateFrom
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > absolute date management > should set absolute dateTo
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > absolute date management > should handle null dates
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > relative expression management > should set expression from
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > relative expression management > should set expression to
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > relative expression management > should handle empty expressions
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > validation state management > should set from expression validity
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > validation state management > should set to expression validity
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > validation state management > should set to expression error
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > reset functionality > should reset all state to defaults
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > reset functionality > should reset to specified default mode
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > model initialization > should handle initializeFromModel
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] initializeFromModel called with: { type: [32m'after'[39m, mode: [32m'relative'[39m, expressionFrom: [32m'Today-30d'[39m }
[useFilterState] Setting filter type to: after
[useFilterState] Setting filter mode to: relative
[useFilterState] Setting relative expressions: { from: [32m'Today-30d'[39m, to: [90mundefined[39m }
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > model initialization > should handle complex range model initialization
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-12-31T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [35m2023-12-31T00:00:00.000Z[39m }
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > model initialization > should preserve validation state during model changes
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [90mundefined[39m }
[useFilterState] Initializing with model: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > edge cases and error handling > should handle invalid filter types gracefully
[useFilterState] Initializing with model: { type: [32m'invalidType'[39m, mode: [32m'absolute'[39m }

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > edge cases and error handling > should handle invalid filter modes gracefully
[useFilterState] Initializing with model: { type: [32m'equals'[39m, mode: [32m'invalidMode'[39m }

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > edge cases and error handling > should handle models with mixed mode/data gracefully
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  expressionFrom: [32m'Today'[39m
}

stdout | src/components/DateFilter/hooks/useFilterState.test.ts > useFilterState hook > state stability and memoization > should provide stable function references
[useFilterState] Initializing with model: [1mnull[22m
[useFilterState] Initializing with model: [1mnull[22m

 ✓ src/utils/filterStateUtils.test.ts (21 tests) 26ms
 ✓ src/components/DateFilter/hooks/useFilterState.test.ts (27 tests) 38ms
 ✓ src/components/DateFilter/components/ErrorBoundary.test.tsx (15 tests) 189ms
 ✓ src/components/DateFilter/components/FilterModeToggle/FilterModeToggle.test.tsx (21 tests | 4 skipped) 86ms
 ✓ src/components/DateFilter/components/FilterActions/FilterActions.test.tsx (26 tests | 3 skipped) 137ms
 ✓ src/components/ActiveFilters/ActiveFilters.test.tsx (22 tests) 209ms
stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > selects an option and applies filter
[QuickFilter] Applying filter: {
  option: [32m'Today'[39m,
  columnId: [32m'date'[39m,
  filterModel: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
}
[QuickFilter] Current grid filter model: {}
[QuickFilter] Setting filter model for column date : { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
[QuickFilter] Final filter model to apply: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Applying workaround for column: date
[Workaround] Starting filter workaround for column: date

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > selects an option and applies filter
[Workaround] Filter instance type: undefined [90mundefined[39m
[Workaround] Filter instance after await: [90mundefined[39m
[Workaround] Has setModel? undefined
[Workaround] Calling onFilterChanged

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > selects an option and applies filter
[Workaround] Forcing grid refresh

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > clears filter when selecting 'All Items'
[QuickFilter] Applying filter: { option: [32m'All Items'[39m, columnId: [32m'date'[39m, filterModel: [1mnull[22m }
[QuickFilter] Current grid filter model: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Final filter model to apply: {}

stdout | src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx > QuickFilterDropdown > supports keyboard navigation
[QuickFilter] Applying filter: {
  option: [32m'Today'[39m,
  columnId: [32m'date'[39m,
  filterModel: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
}
[QuickFilter] Current grid filter model: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Setting filter model for column date : { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m }
[QuickFilter] Final filter model to apply: { date: { mode: [32m'relative'[39m, type: [32m'equals'[39m, expressionFrom: [32m'Today'[39m } }
[QuickFilter] Applying workaround for column: date
[Workaround] Starting filter workaround for column: date

 ✓ src/components/QuickFilterDropdown/QuickFilterDropdown.test.tsx (13 tests) 535ms
stdout | applyFilterModelWithWorkaround (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/src/components/QuickFilterDropdown/utils/agGridWorkaround.ts:36:13)
[Workaround] Filter instance type: undefined [90mundefined[39m

stdout | applyFilterModelWithWorkaround (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/src/components/QuickFilterDropdown/utils/agGridWorkaround.ts:58:13)
[Workaround] Filter instance after await: [90mundefined[39m

stdout | applyFilterModelWithWorkaround (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/src/components/QuickFilterDropdown/utils/agGridWorkaround.ts:59:13)
[Workaround] Has setModel? undefined

stdout | applyFilterModelWithWorkaround (/Users/ryan/code-repos/github/ryanrozich/ag-grid-react-components/src/components/QuickFilterDropdown/utils/agGridWorkaround.ts:83:13)
[Workaround] Calling onFilterChanged

stdout | src/demo/components/AvatarCellRenderer.test.tsx > AvatarCellRenderer > generates correct initials for full name
Avatar for Sarah Johnson: {
  url: [32m'https://i.pravatar.cc/64?u=sarahjohnson'[39m,
  seed: [32m'sarahjohnson'[39m,
  imageError: [33mfalse[39m,
  imageLoaded: [33mfalse[39m
}

 ✓ src/demo/components/AvatarCellRenderer.test.tsx (7 tests | 1 skipped) 44ms
stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > relative expression validation > should validate equals filter with valid expression
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T23:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > relative expression validation > should invalidate equals filter with invalid expression
[useFilterValidation] Resolved expressionFrom "InvalidExpression" to: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > relative expression validation > should validate inRange filter with valid expressions
[useFilterValidation] Resolved expressionFrom "Today-7d" to: [35m2022-12-24T23:00:00.000Z[39m
[useFilterValidation] Resolved expressionTo "Today+7d" to: [35m2023-01-07T23:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > relative expression validation > should invalidate inRange filter with missing or invalid expressions
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T23:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > relative expression validation > should resolve various date expressions correctly
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T23:00:00.000Z[39m
[useFilterValidation] Resolved expressionFrom "Today+7d" to: [35m2023-01-07T23:00:00.000Z[39m
[useFilterValidation] Resolved expressionFrom "Today-30d" to: [35m2022-12-01T23:00:00.000Z[39m
[useFilterValidation] Resolved expressionFrom "Today+2w" to: [35m2023-01-14T23:00:00.000Z[39m
[useFilterValidation] Resolved expressionFrom "Today-1m" to: [35m2022-11-30T23:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > expression validation utility > should return validateToExpression function
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T23:00:00.000Z[39m
[useFilterValidation] Resolved expressionTo "Today+7d" to: [35m2023-01-07T23:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > expression validation utility > should validate expressions through validateToExpression
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T23:00:00.000Z[39m
[useFilterValidation] Resolved expressionTo "Today+7d" to: [35m2023-01-07T23:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > edge cases and complex scenarios > should handle mixed valid/invalid expression states
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T23:00:00.000Z[39m
[useFilterValidation] Resolved expressionTo "InvalidExpression" to: [1mnull[22m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > edge cases and complex scenarios > should update validation when inputs change
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T23:00:00.000Z[39m
[useFilterValidation] Resolved expressionFrom "Today+7d" to: [35m2023-01-07T23:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > performance and memoization > should provide stable function references
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T23:00:00.000Z[39m

stdout | src/components/DateFilter/hooks/useFilterValidation.test.ts > useFilterValidation hook > timezone and date normalization > should resolve expressions to consistent date format
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2022-12-31T23:00:00.000Z[39m

 ✓ src/demo/components/CategoryCellRenderer.test.tsx (4 tests) 86ms
 ❯ src/components/DateFilter/hooks/useFilterValidation.test.ts (20 tests | 3 failed) 48ms
   ✓ useFilterValidation hook > absolute date validation > should validate equals filter with valid date 11ms
   ✓ useFilterValidation hook > absolute date validation > should invalidate equals filter without date 1ms
   ✓ useFilterValidation hook > absolute date validation > should validate inRange filter with both dates 2ms
   × useFilterValidation hook > absolute date validation > should invalidate inRange filter with missing dates 6ms
     → expected true to be false // Object.is equality
   ✓ useFilterValidation hook > absolute date validation > should validate single date filters (before, after, notEqual) 3ms
   ✓ useFilterValidation hook > relative expression validation > should validate equals filter with valid expression 2ms
   ✓ useFilterValidation hook > relative expression validation > should invalidate equals filter with invalid expression 2ms
   ✓ useFilterValidation hook > relative expression validation > should validate inRange filter with valid expressions 1ms
   × useFilterValidation hook > relative expression validation > should invalidate inRange filter with missing or invalid expressions 1ms
     → expected true to be false // Object.is equality
   ✓ useFilterValidation hook > relative expression validation > should resolve various date expressions correctly 2ms
   ✓ useFilterValidation hook > expression validation utility > should return validateToExpression function 1ms
   ✓ useFilterValidation hook > expression validation utility > should validate expressions through validateToExpression 1ms
   ✓ useFilterValidation hook > edge cases and complex scenarios > should handle empty expressions gracefully 0ms
   × useFilterValidation hook > edge cases and complex scenarios > should handle mixed valid/invalid expression states 5ms
     → expected true to be false // Object.is equality
   ✓ useFilterValidation hook > edge cases and complex scenarios > should handle date range validation with crossed dates 1ms
   ✓ useFilterValidation hook > edge cases and complex scenarios > should update validation when inputs change 7ms
   ✓ useFilterValidation hook > performance and memoization > should memoize validation results 1ms
   ✓ useFilterValidation hook > performance and memoization > should provide stable function references 1ms
   ✓ useFilterValidation hook > timezone and date normalization > should handle dates consistently across timezones 0ms
   ✓ useFilterValidation hook > timezone and date normalization > should resolve expressions to consistent date format 1ms
 ✓ src/utils/dateExpressionParser.test.ts (14 tests) 7ms
stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > renders all expected controls (mode toggle, date input, action buttons)
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: [90mundefined[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Full Component Integration > should render all components in absolute mode
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > renders with a relative date model
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"relative","expressionFrom":"last 7 days"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'relative'[39m,
      expressionFrom: [32m'last 7 days'[39m,
      dateFrom: [90mundefined[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'last 7 days'[39m,
  dateFrom: [90mundefined[39m,
  dateTo: [90mundefined[39m
}
[useFilterValidation] Resolved expressionFrom "last 7 days" to: [1mnull[22m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'last 7 days'[39m,
  dateFrom: [90mundefined[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'last 7 days'[39m,
  dateFrom: [90mundefined[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: relative
[useFilterState] Setting relative expressions: { from: [32m'last 7 days'[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"relative","expressionFrom":"last 7 days"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'relative'[39m,
      expressionFrom: [32m'last 7 days'[39m,
      dateFrom: [90mundefined[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'last 7 days'[39m,
  dateFrom: [90mundefined[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > renders with an empty/null model
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: [90mundefined[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Full Component Integration > should switch between absolute and relative modes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > handles invalid/unsupported model gracefully
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"unknown","mode":"absolute"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[useFilterState] Setting filter type to: unknown
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [90mundefined[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"unknown","mode":"absolute"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[useFilterState] Setting filter type to: unknown
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [90mundefined[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"unknown","mode":"absolute"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: { type: [32m'unknown'[39m, mode: [32m'absolute'[39m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Full Component Integration > should apply filter when Apply button is clicked
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z","dateTo":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [1mnull[22m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [1mnull[22m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Full Component Integration > should apply filter when Apply button is clicked
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > updates UI when model prop changes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-01T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2024-01-01T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2024-01-01T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2024-01-01T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2024-01-01T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2024-01-01T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2024-01-01T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > main filter container has ARIA role and attributes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: [90mundefined[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > renders without crashing
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: [90mundefined[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > should initialize with default values
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Full Component Integration > should reset filter when Clear button is clicked
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z","dateTo":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [1mnull[22m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [1mnull[22m }
Reset filter
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z","dateTo":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [1mnull[22m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [1mnull[22m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z","dateTo":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [1mnull[22m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [1mnull[22m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z","dateTo":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [1mnull[22m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > State Management Integration > should maintain state consistency across mode changes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > State Management Integration > should maintain state consistency across mode changes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > should trigger filterChangedCallback when filter changes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > State Management Integration > should validate filter types correctly
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"inRange","mode":"absolute","dateFrom":"2023-01-01T00:00:00.000Z","dateTo":"2023-01-31T00:00:00.000Z"}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'inRange'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
      dateTo: [35m2023-01-31T00:00:00.000Z[39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-31T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-31T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-31T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [35m2023-01-31T00:00:00.000Z[39m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Validation Integration > should disable Apply button when filter is invalid
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > should properly filter data using doesFilterPass
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"inRange","mode":"absolute","dateFrom":"2023-01-01T00:00:00.000Z","dateTo":"2023-01-10T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'inRange'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
      dateTo: [35m2023-01-10T00:00:00.000Z[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [35m2023-01-10T00:00:00.000Z[39m }

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > validates relative date expressions
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"inRange","mode":"absolute","dateFrom":"2023-01-01T00:00:00.000Z","dateTo":"2023-01-10T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'inRange'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
      dateTo: [35m2023-01-10T00:00:00.000Z[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-01T00:00:00.000Z[39m,
  dateTo: [35m2023-01-10T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-01T00:00:00.000Z[39m, to: [35m2023-01-10T00:00:00.000Z[39m }

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > registers the filter with ag-grid
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: [90mundefined[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > should handle keyboard events
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {}
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/RelativeDateFilter.test.tsx > DateFilter > should return correct string representation using getModelAsString
[DateFilter] Component instantiated with props: {
  hasColumn: [33mfalse[39m,
  hasColDef: [33mfalse[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    testId: [32m'test-filter'[39m,
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    onModelChange: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
      dateTo: [90mundefined[39m
    },
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    context: {},
    getModelAsString: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Validation Integration > should enable Apply button when filter becomes valid
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2025-06-25T22:00:00.000Z[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Performance Integration > should debounce validation correctly
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "T" to: [1mnull[22m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "To" to: [1mnull[22m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "Tod" to: [1mnull[22m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "Toda" to: [1mnull[22m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2025-06-25T22:00:00.000Z[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

 ✓ src/components/RelativeDateFilter.test.tsx (14 tests) 124ms
stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Error Handling Integration > should handle invalid initial model gracefully
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"invalidType","mode":"invalidMode","dateFrom":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
  }
}
[useFilterState] Initializing with model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[useFilterState] Setting filter type to: invalidType
[useFilterState] Setting filter mode to: invalidMode
[useFilterState] Setting relative expressions: { from: [90mundefined[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"invalidType","mode":"invalidMode","dateFrom":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
  }
}
[useFilterState] Initializing with model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[useFilterState] Setting filter type to: invalidType
[useFilterState] Setting filter mode to: invalidMode
[useFilterState] Setting relative expressions: { from: [90mundefined[39m, to: [90mundefined[39m }
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"invalidType","mode":"invalidMode","dateFrom":null}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
  }
}
[useFilterState] Initializing with model: { type: [32m'invalidType'[39m, mode: [32m'invalidMode'[39m, dateFrom: [1mnull[22m }
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Error Handling Integration > should handle component rendering with errors gracefully
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Accessibility Integration > should have proper ARIA attributes
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Accessibility Integration > should support keyboard navigation
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] applyFilter called with currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}
Applied filter: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > should register doesFilterPass callback with AG Grid
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > should provide filter model through getModel callback
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'{"type":"equals","mode":"absolute","dateFrom":"2023-01-15T00:00:00.000Z"}'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    model: {
      type: [32m'equals'[39m,
      mode: [32m'absolute'[39m,
      dateFrom: [35m2023-01-15T00:00:00.000Z[39m
    }
  }
}
[useFilterState] Initializing with model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[DateFilter] useEffect: Applying model from props
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > should provide filter model through getModel callback
[DateFilter] getModel called, returning: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should return true when no filter is active
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] doesFilterPass called #1 currentModel: [1mnull[22m isValid: [33mfalse[39m effectiveDateFrom: [1mnull[22m effectiveDateTo: [1mnull[22m
[DateFilter] Returning true - no valid filter

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with equals operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with equals operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with equals operator
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2023-01-14T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2023-01-15T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with equals operator
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with notEqual operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] setModel called with: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: notEqual
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with notEqual operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with notEqual operator
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: notEqual {
  cellDate: [35m2023-01-15T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'notEqual'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: notEqual {
  cellDate: [35m2023-01-14T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with notEqual operator
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with after operator (inclusive)
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    afterInclusive: [33mtrue[39m
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m
}
[DateFilter] setModel called with: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: after
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with after operator (inclusive)
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    afterInclusive: [33mtrue[39m
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with after operator (inclusive)
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: after {
  cellDate: [35m2023-01-15T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: after {
  cellDate: [35m2023-01-14T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #3 currentModel: {
  type: [32m'after'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: after {
  cellDate: [35m2023-01-13T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with after operator (inclusive)
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with before operator (exclusive)
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    beforeInclusive: [33mfalse[39m
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  toInclusive: [33mfalse[39m
}
[DateFilter] setModel called with: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  toInclusive: [33mfalse[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  toInclusive: [33mfalse[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: before
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  toInclusive: [33mfalse[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with before operator (exclusive)
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    beforeInclusive: [33mfalse[39m
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with before operator (exclusive)
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: before {
  cellDate: [35m2023-01-13T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: before {
  cellDate: [35m2023-01-14T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #3 currentModel: {
  type: [32m'before'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: before {
  cellDate: [35m2023-01-15T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with before operator (exclusive)
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with inRange operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-10T00:00:00.000Z'[39m,
  dateTo: [32m'2023-01-20T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
}
[DateFilter] setModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-10T00:00:00.000Z'[39m,
  dateTo: [32m'2023-01-20T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-10T00:00:00.000Z[39m, to: [35m2023-01-20T00:00:00.000Z[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-10T00:00:00.000Z'[39m,
  dateTo: [32m'2023-01-20T00:00:00.000Z'[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with inRange operator
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with inRange operator
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with inRange operator
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-10T00:00:00.000Z[39m effectiveDateTo: [35m2023-01-20T00:00:00.000Z[39m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-14T23:00:00.000Z[39m,
  fromDate: [35m2023-01-09T23:00:00.000Z[39m,
  toDate: [35m2023-01-19T23:00:00.000Z[39m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-10T00:00:00.000Z[39m effectiveDateTo: [35m2023-01-20T00:00:00.000Z[39m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-09T23:00:00.000Z[39m,
  fromDate: [35m2023-01-09T23:00:00.000Z[39m,
  toDate: [35m2023-01-19T23:00:00.000Z[39m
}
[DateFilter] doesFilterPass called #3 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-10T00:00:00.000Z[39m effectiveDateTo: [35m2023-01-20T00:00:00.000Z[39m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-19T23:00:00.000Z[39m,
  fromDate: [35m2023-01-09T23:00:00.000Z[39m,
  toDate: [35m2023-01-19T23:00:00.000Z[39m
}
[DateFilter] doesFilterPass called #4 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-10T00:00:00.000Z[39m effectiveDateTo: [35m2023-01-20T00:00:00.000Z[39m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-08T23:00:00.000Z[39m,
  fromDate: [35m2023-01-09T23:00:00.000Z[39m,
  toDate: [35m2023-01-19T23:00:00.000Z[39m
}
[DateFilter] doesFilterPass called #5 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-10T00:00:00.000Z[39m,
  dateTo: [35m2023-01-20T00:00:00.000Z[39m,
  fromInclusive: [33mtrue[39m,
  toInclusive: [33mtrue[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-10T00:00:00.000Z[39m effectiveDateTo: [35m2023-01-20T00:00:00.000Z[39m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-20T23:00:00.000Z[39m,
  fromDate: [35m2023-01-09T23:00:00.000Z[39m,
  toDate: [35m2023-01-19T23:00:00.000Z[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should filter dates with inRange operator
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle null and invalid dates
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle null and invalid dates
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle null and invalid dates
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] doesFilterPass called #3 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] doesFilterPass called #4 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35mInvalid Date[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle null and invalid dates
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle relative date expressions
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: { type: [32m'equals'[39m, mode: [32m'relative'[39m, expressionFrom: [32m'Today'[39m }
[DateFilter] setModel called with: { type: [32m'equals'[39m, mode: [32m'relative'[39m, expressionFrom: [32m'Today'[39m }
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'Today'[39m,
  dateFrom: [90mundefined[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: relative
[useFilterState] Setting relative expressions: { from: [32m'Today'[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: { type: [32m'equals'[39m, mode: [32m'relative'[39m, expressionFrom: [32m'Today'[39m }

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle relative date expressions
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[useFilterValidation] Resolved expressionFrom "Today" to: [35m2025-06-25T22:00:00.000Z[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle relative date expressions
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'Today'[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2025-06-25T22:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2025-06-25T22:00:00.000Z[39m,
  fromDate: [35m2025-06-25T22:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'relative'[39m,
  expressionFrom: [32m'Today'[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2025-06-25T22:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2025-06-26T22:00:00.000Z[39m,
  fromDate: [35m2025-06-25T22:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle relative date expressions
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle open-ended ranges
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  dateTo: [1mnull[22m
}
[DateFilter] setModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  dateTo: [1mnull[22m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m
}
[useFilterState] Setting filter type to: inRange
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [1mnull[22m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m,
  dateTo: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle open-ended ranges
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle open-ended ranges
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-19T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'inRange'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [1mnull[22m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: inRange {
  cellDate: [35m2023-01-09T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle open-ended ranges
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle time normalization correctly
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m
[DateFilter] useEffect: model prop changed: [90mundefined[39m
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] setModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}
[DateFilter] Current filter state before setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
[useFilterState] initializeFromModel called with: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  dateTo: [90mundefined[39m
}
[useFilterState] Setting filter type to: equals
[useFilterState] Setting filter mode to: absolute
[useFilterState] Setting absolute dates: { from: [35m2023-01-15T00:00:00.000Z[39m, to: [90mundefined[39m }
[DateFilter] Filter state after setting model: {
  filterType: [32m'equals'[39m,
  filterMode: [32m'absolute'[39m,
  expressionFrom: [32m''[39m,
  expressionTo: [32m''[39m
}
Filter state initialized from model: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [32m'2023-01-15T00:00:00.000Z'[39m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle time normalization correctly
[DateFilter] Component instantiated with props: {
  hasColumn: [33mtrue[39m,
  hasColDef: [33mtrue[39m,
  hasGetValue: [33mtrue[39m,
  model: [32m'null'[39m,
  filterParams: {
    column: { getColId: [36m[Function: getColId][39m },
    api: { addEventListener: [36m[Function][39m },
    context: {},
    testId: [32m'date-filter-integration'[39m,
    filterChangedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    filterModifiedCallback: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    colDef: {},
    rowModel: {},
    getValue: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    doesRowPassOtherFilter: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  }
}
[useFilterState] Initializing with model: [90mundefined[39m
[DateFilter] Registering callbacks with useGridFilter
[DateFilter] useGridFilter returned: [90mundefined[39m

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle time normalization correctly
[DateFilter] doesFilterPass called #1 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2023-01-14T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}
[DateFilter] doesFilterPass called #2 currentModel: {
  type: [32m'equals'[39m,
  mode: [32m'absolute'[39m,
  dateFrom: [35m2023-01-15T00:00:00.000Z[39m,
  fromInclusive: [33mfalse[39m,
  toInclusive: [33mfalse[39m
} isValid: [33mtrue[39m effectiveDateFrom: [35m2023-01-15T00:00:00.000Z[39m effectiveDateTo: [1mnull[22m
[DateFilter] Applying filter type: equals {
  cellDate: [35m2023-01-14T23:00:00.000Z[39m,
  fromDate: [35m2023-01-14T23:00:00.000Z[39m,
  toDate: [1mnull[22m
}

stdout | src/components/DateFilter/DateFilter.integration.test.tsx > DateFilter Integration Tests > Filter Logic Integration > doesFilterPass implementation > should handle time normalization correctly
[DateFilter] useEffect: model prop changed: [90mundefined[39m

stdout | src/components/DateFilter/index.tsx:434:23
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update
[DateFilter] Calling filterChangedCallback after state update

 ✓ src/components/DateFilter/DateFilter.integration.test.tsx (25 tests) 245ms

 Test Files  1 failed | 12 passed (13)
      Tests  3 failed | 218 passed | 8 skipped (229)
   Start at  23:57:42
   Duration  2.85s (transform 1.12s, setup 2.42s, collect 6.12s, tests 1.78s, environment 6.15s, prepare 1.89s)

