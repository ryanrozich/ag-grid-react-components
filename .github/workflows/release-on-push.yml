name: Automated Release

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "package.json"
      - "!**/*.test.*"
      - "!**/*.spec.*"
      - "!**/__tests__/**"

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      release-type: ${{ steps.check.outputs.release-type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        id: check
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found"
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --no-merges)
          fi

          # Check for conventional commits
          SHOULD_RELEASE="false"
          RELEASE_TYPE="patch"

          if echo "$COMMITS" | grep -q "^feat!:\|^fix!:\|^BREAKING CHANGE:"; then
            SHOULD_RELEASE="true"
            RELEASE_TYPE="major"
          elif echo "$COMMITS" | grep -q "^feat:"; then
            SHOULD_RELEASE="true"
            RELEASE_TYPE="minor"
          elif echo "$COMMITS" | grep -q "^fix:"; then
            SHOULD_RELEASE="true"
            RELEASE_TYPE="patch"
          fi

          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

          echo "Should release: $SHOULD_RELEASE"
          echo "Release type: $RELEASE_TYPE"

  release:
    needs: check-release
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          npm run test:unit
          npm run lint
          npm run typecheck

      - name: Build package
        run: npm run build

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release
        id: version
        run: |
          npm run release:${{ needs.check-release.outputs.release-type }}
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Push changes
        run: |
          git push --follow-tags origin main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
