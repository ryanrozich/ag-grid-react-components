name: Publish to NPM

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (latest, beta, alpha, next)"
        required: true
        default: "latest"
        type: choice
        options:
          - latest
          - beta
          - alpha
          - next

permissions:
  contents: write
  id-token: write # For npm provenance

jobs:
  publish:
    name: Publish Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:unit

      - name: Run linting
        run: npm run lint

      - name: Run typecheck
        run: npm run typecheck

      - name: Build package
        run: npm run build

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Determine version and tag
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}" # Remove 'v' prefix if present
            
            # Determine tag based on version string
            if [[ "$VERSION" == *"beta"* ]]; then
              TAG="beta"
            elif [[ "$VERSION" == *"alpha"* ]]; then
              TAG="alpha"
            elif [[ "$VERSION" == *"rc"* ]]; then
              TAG="next"
            else
              TAG="latest"
            fi
          else
            VERSION="$CURRENT_VERSION"
            TAG="${{ github.event.inputs.tag }}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Publishing version $VERSION with tag $TAG"

      - name: Update package version (if needed)
        if: steps.version.outputs.version != ''
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          fi

      - name: Publish to NPM
        run: npm publish --access public --tag ${{ steps.version.outputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create deployment summary
        run: |
          echo "## ðŸ“¦ Published to NPM" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** ag-grid-react-components@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install ag-grid-react-components@${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View on NPM: https://www.npmjs.com/package/ag-grid-react-components" >> $GITHUB_STEP_SUMMARY
